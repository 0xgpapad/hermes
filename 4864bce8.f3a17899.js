(window.webpackJsonp=window.webpackJsonp||[]).push([[6],{179:function(e,n,t){"use strict";t.d(n,"a",(function(){return d})),t.d(n,"b",(function(){return m}));var a=t(0),i=t.n(a);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function r(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function l(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?r(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):r(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function c(e,n){if(null==e)return{};var t,a,i=function(e,n){if(null==e)return{};var t,a,i={},o=Object.keys(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||(i[t]=e[t]);return i}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}var s=i.a.createContext({}),b=function(e){var n=i.a.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):l(l({},n),e)),t},d=function(e){var n=b(e.components);return i.a.createElement(s.Provider,{value:n},e.children)},p={inlineCode:"code",wrapper:function(e){var n=e.children;return i.a.createElement(i.a.Fragment,{},n)}},u=i.a.forwardRef((function(e,n){var t=e.components,a=e.mdxType,o=e.originalType,r=e.parentName,s=c(e,["components","mdxType","originalType","parentName"]),d=b(t),u=a,m=d["".concat(r,".").concat(u)]||d[u]||p[u]||o;return t?i.a.createElement(m,l(l({ref:n},s),{},{components:t})):i.a.createElement(m,l({ref:n},s))}));function m(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var o=t.length,r=new Array(o);r[0]=u;var l={};for(var c in n)hasOwnProperty.call(n,c)&&(l[c]=n[c]);l.originalType=e,l.mdxType="string"==typeof e?e:a,r[1]=l;for(var s=2;s<o;s++)r[s]=t[s];return i.a.createElement.apply(null,r)}return i.a.createElement.apply(null,t)}u.displayName="MDXCreateElement"},76:function(e,n,t){"use strict";t.r(n),t.d(n,"frontMatter",(function(){return r})),t.d(n,"metadata",(function(){return l})),t.d(n,"rightToc",(function(){return c})),t.d(n,"default",(function(){return b}));var a=t(3),i=t(7),o=(t(0),t(179)),r={id:"vm",title:"Hermes VM"},l={unversionedId:"vm",id:"vm",isDocsHomePage:!1,title:"Hermes VM",description:"Value Representation",source:"@site/../doc/VM.md",slug:"/vm",permalink:"/docs/vm",editUrl:"https://github.com/facebook/hermes/blob/master/website/../doc/VM.md",version:"current",lastUpdatedAt:1607758573,sidebar:"docs",previous:{title:"Language Features",permalink:"/docs/language-features"},next:{title:"Modules",permalink:"/docs/modules"}},c=[{value:"Value Representation",id:"value-representation",children:[{value:"Strings",id:"strings",children:[]}]},{value:"Runtime",id:"runtime",children:[{value:"Runtime Module",id:"runtime-module",children:[]},{value:"Runtime Identifiers",id:"runtime-identifiers",children:[]},{value:"Garbage Collection",id:"garbage-collection",children:[]}]},{value:"Object Model",id:"object-model",children:[{value:"Objects",id:"objects",children:[]},{value:"Arrays",id:"arrays",children:[]},{value:"Functions",id:"functions",children:[]},{value:"Boxed Primitives",id:"boxed-primitives",children:[]}]},{value:"REPL",id:"repl",children:[]}],s={rightToc:c};function b(e){var n=e.components,t=Object(i.a)(e,["components"]);return Object(o.b)("wrapper",Object(a.a)({},s,t,{components:n,mdxType:"MDXLayout"}),Object(o.b)("h2",{id:"value-representation"},"Value Representation"),Object(o.b)("p",null,"The VM uses a class called ",Object(o.b)("inlineCode",{parentName:"p"},"HermesValue")," to encapsulate JS values efficiently,\npreserving their type while still allowing them to fit in a register.\nNaN-tagging is used to store different types of values;\nwe store values in the lower bits of a ",Object(o.b)("inlineCode",{parentName:"p"},"uint64_t"),".\nThus, when the ",Object(o.b)("inlineCode",{parentName:"p"},"uint64_t")," is interpreted as a ",Object(o.b)("inlineCode",{parentName:"p"},"double"),",\ntagged ",Object(o.b)("inlineCode",{parentName:"p"},"NaN")," values can hold non-",Object(o.b)("inlineCode",{parentName:"p"},"double")," types."),Object(o.b)("h3",{id:"strings"},"Strings"),Object(o.b)("p",null,Object(o.b)("inlineCode",{parentName:"p"},"StringPrimitive")," is used to store immutable UTF16 encoded strings,\nand ",Object(o.b)("inlineCode",{parentName:"p"},"StringPrimitive *")," can be stored in ",Object(o.b)("inlineCode",{parentName:"p"},"HermesValue")," to make JS String values."),Object(o.b)("p",null,"Internally, ",Object(o.b)("inlineCode",{parentName:"p"},"StringPrimitive")," can be"),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},Object(o.b)("inlineCode",{parentName:"li"},"DynamicStringPrimitive")," (stored in the GC heap)"),Object(o.b)("li",{parentName:"ul"},Object(o.b)("inlineCode",{parentName:"li"},"ExternalStringPrimitive")," (stored as a pointer outside the VM, such as into a bytecode file)")),Object(o.b)("h2",{id:"runtime"},"Runtime"),Object(o.b)("p",null,"The ",Object(o.b)("inlineCode",{parentName:"p"},"Runtime")," class is the primary driver of the VM.\nIt contains the current environment and heap, as well as the code to execute.\n",Object(o.b)("inlineCode",{parentName:"p"},"Runtime")," is used to execute ",Object(o.b)("inlineCode",{parentName:"p"},"RuntimeModule"),"s,\nwhich are constructed from ",Object(o.b)("inlineCode",{parentName:"p"},"BytecodeModule"),"s using ",Object(o.b)("inlineCode",{parentName:"p"},"Runtime::runModule()"),"."),Object(o.b)("h3",{id:"runtime-module"},"Runtime Module"),Object(o.b)("p",null,"A ",Object(o.b)("inlineCode",{parentName:"p"},"RuntimeModule")," is the VM representation into a bytecode file.\n",Object(o.b)("inlineCode",{parentName:"p"},"RuntimeModule"),"s are stored outside the GC heap and are constructed via ",Object(o.b)("inlineCode",{parentName:"p"},"new"),"."),Object(o.b)("p",null,"To allow for segmentation of bytecode files and ",Object(o.b)("inlineCode",{parentName:"p"},"require"),"ing modules between\nseparate segments, we collect ",Object(o.b)("inlineCode",{parentName:"p"},"RuntimeModule"),"s in a class called ",Object(o.b)("inlineCode",{parentName:"p"},"Domain"),".\nYou may think of the ",Object(o.b)("inlineCode",{parentName:"p"},"Domain")," as the collection of bytecode files which were\nall compiled in the same invocation of the compiler."),Object(o.b)("p",null,"Every ",Object(o.b)("inlineCode",{parentName:"p"},"JSFunction")," shares ownership of a ",Object(o.b)("inlineCode",{parentName:"p"},"Domain"),", and the ",Object(o.b)("inlineCode",{parentName:"p"},"Domain")," owns\nthe ",Object(o.b)("inlineCode",{parentName:"p"},"RuntimeModule"),"s which provide those functions. In this way, when all\n",Object(o.b)("inlineCode",{parentName:"p"},"JSFunction"),"s which require the files in a ",Object(o.b)("inlineCode",{parentName:"p"},"Domain")," are collected,\nthe ",Object(o.b)("inlineCode",{parentName:"p"},"Domain")," and the ",Object(o.b)("inlineCode",{parentName:"p"},"RuntimeModule"),"s are also collected."),Object(o.b)("h3",{id:"runtime-identifiers"},"Runtime Identifiers"),Object(o.b)("p",null,"The ",Object(o.b)("inlineCode",{parentName:"p"},"Runtime")," contains an ",Object(o.b)("inlineCode",{parentName:"p"},"IdentifierTable"),",\nwhich is used for getting unique IDs for strings.\nThe table is used to go from ",Object(o.b)("inlineCode",{parentName:"p"},"StringPrimitive")," to ",Object(o.b)("inlineCode",{parentName:"p"},"SymbolID"),' and back.\nIt\'s prepopulated with some "predefined strings",\nthe set of strings that are required by built in functions,\nwhich can be seen in ',Object(o.b)("inlineCode",{parentName:"p"},"PredefinedStrings.def"),"."),Object(o.b)("h3",{id:"garbage-collection"},"Garbage Collection"),Object(o.b)("p",null,"Currently, the VM uses ",Object(o.b)("inlineCode",{parentName:"p"},"GenGCNC")," (generational non-contiguous GC).\nThe collector allows non-contiguous heap allocation.\nThis avoids preallocating too much memory, as well as returning memory to the OS.\nThe garbage collector is precise\n(it knows what ",Object(o.b)("inlineCode",{parentName:"p"},"HermesValue"),"s are valid pointers to objects in the JS heap)."),Object(o.b)("p",null,"TODO: Elaborate on the garbage collector requirements and future plans."),Object(o.b)("p",null,"The garbage collector moves objects to different place on the heap,\ninvalidating ",Object(o.b)("inlineCode",{parentName:"p"},"HermesValue"),"s,\nso there are a couple classes which allow updating them automatically.\n",Object(o.b)("inlineCode",{parentName:"p"},"Handle<>")," and ",Object(o.b)("inlineCode",{parentName:"p"},"Handle<T>")," are garbage collector-aware handles;\nthey are moved if a collection occurs in between two successive accesses.\nSo, to ensure correctness in the VM,\nuse the handles instead of passing raw ",Object(o.b)("inlineCode",{parentName:"p"},"HermesValue")," between functions."),Object(o.b)("p",null,"A ",Object(o.b)("inlineCode",{parentName:"p"},"GCScope")," is used to keep track of all the current ",Object(o.b)("inlineCode",{parentName:"p"},"HermesValue")," handles.\nAny ",Object(o.b)("inlineCode",{parentName:"p"},"GCScope")," must be constructed on the stack,\nwhence it tracks any scoped handles that are used until it falls out of scope.\nThe ",Object(o.b)("inlineCode",{parentName:"p"},"GCScope")," allocates space in chunks,\nand when it is destroyed (falls out of scope) it frees any chunks it allocated.\nThe ",Object(o.b)("inlineCode",{parentName:"p"},"GCScope")," is used to internally generate ",Object(o.b)("inlineCode",{parentName:"p"},"PinnedHermesValue"),"s,\nwhich are then stored in ",Object(o.b)("inlineCode",{parentName:"p"},"Handle<>")," and ",Object(o.b)("inlineCode",{parentName:"p"},"Handle<T>"),"."),Object(o.b)("p",null,"We also provide ",Object(o.b)("inlineCode",{parentName:"p"},"PseudoHandle<T>")," classes which are explicitly ",Object(o.b)("em",{parentName:"p"},"not")," handles.\nThese are used to be explicit about storage of raw pointers and ",Object(o.b)("inlineCode",{parentName:"p"},"HermesValue"),".\n",Object(o.b)("inlineCode",{parentName:"p"},"PseudoHandle")," should be used as an argument in place of a raw pointer to\nfunctions which may want to turn that argument into a ",Object(o.b)("inlineCode",{parentName:"p"},"Handle"),",\nbut in which it's not necessary to ",Object(o.b)("em",{parentName:"p"},"always")," incur the cost of handle allocation.\n",Object(o.b)("inlineCode",{parentName:"p"},"PseudoHandle")," also does not have a copy constructor,\nand moving out of one invalidates it.\nThis prevents the reuse of ",Object(o.b)("inlineCode",{parentName:"p"},"PseudoHandle")," after an allocating function call."),Object(o.b)("h4",{id:"rules-for-using-handles"},"Rules for using handles"),Object(o.b)("ol",null,Object(o.b)("li",{parentName:"ol"},"A function that can perform an allocation (even if it doesn't do it every\ntime) or calls a function that does, must accept and return only handles\n(for GC-managed objects). It must also take a ",Object(o.b)("inlineCode",{parentName:"li"},"Runtime*")," as an argument."),Object(o.b)("li",{parentName:"ol"},"A function that accepts or returns handles is allowed (and can be assumed\nto) allocate more handles, but the upper bound of allocated handles must be\nstatic."),Object(o.b)("li",{parentName:"ol"},"The number of handles in a given GCScope should have a static upper limit.")),Object(o.b)("p",null,"The motivation for these rules should be self-explanatory.  The practical\nimplication of rule 2 and 3 is that recursion and loops that allocate handles\nin every iteration must be treated specially.  In case of recursion a new\nGCScope should be defined in each recurrence (is that the correct term?).  In\ncase of a loop, there are a couple of possibilities:"),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},"in loops that are expected to be low iteration and not performance critical,\na new GCScope can be defined in the body of the loop."),Object(o.b)("li",{parentName:"ul"},"otherwise a GCScope::Marker should be used to flush the allocated handles of\nthe previous iteration."),Object(o.b)("li",{parentName:"ul"},"mutable handles can be used to avoid allocating a new handle on every\niteration.")),Object(o.b)("h2",{id:"object-model"},"Object Model"),Object(o.b)("p",null,'Currently the object model is a VTable-based scheme,\nin which all possible JS values inherit from a base garbage collector VTable.\nThese are called "cells", and all the cells are defined in ',Object(o.b)("inlineCode",{parentName:"p"},"CellKinds.def"),".\nObjects have a special ",Object(o.b)("inlineCode",{parentName:"p"},"ObjectVTable"),", Callables have a ",Object(o.b)("inlineCode",{parentName:"p"},"CallableVTable"),", etc."),Object(o.b)("h3",{id:"objects"},"Objects"),Object(o.b)("p",null,"Each JS object is represented by ",Object(o.b)("inlineCode",{parentName:"p"},"Object")," (or a class derived from ",Object(o.b)("inlineCode",{parentName:"p"},"Object"),').\nJS objects have a set of name/value pairs, and some optional "indexed storage".\nRead more about how ',Object(o.b)("inlineCode",{parentName:"p"},"Object")," works in ",Object(o.b)("inlineCode",{parentName:"p"},"ObjectModel.h"),".\nThe Runtime contains a global object which is used to store in global scope."),Object(o.b)("h3",{id:"arrays"},"Arrays"),Object(o.b)("p",null,"Arrays, the ",Object(o.b)("inlineCode",{parentName:"p"},"arguments")," object, etc. inherit from Object directly,\nbut simply provide their own implementations of ",Object(o.b)("inlineCode",{parentName:"p"},"*OwnIndexed")," using the VTable."),Object(o.b)("h3",{id:"functions"},"Functions"),Object(o.b)("p",null,"Functions and native functions inherit from ",Object(o.b)("inlineCode",{parentName:"p"},"Callable"),".\nThis allows them to call ",Object(o.b)("inlineCode",{parentName:"p"},"executeCall*")," to run functions using the internal API."),Object(o.b)("h3",{id:"boxed-primitives"},"Boxed Primitives"),Object(o.b)("p",null,"The ",Object(o.b)("inlineCode",{parentName:"p"},"PrimitiveBox")," class is used to contain Booleans, Strings, and Numbers,\nwhen they are constructed using their respective JS constructors.\n",Object(o.b)("inlineCode",{parentName:"p"},"JSString")," is a ",Object(o.b)("inlineCode",{parentName:"p"},"PrimitiveBox")," that is used for ",Object(o.b)("inlineCode",{parentName:"p"},"String")," objects, etc."),Object(o.b)("h2",{id:"repl"},"REPL"),Object(o.b)("p",null,"The HermesVM provides a REPL in ",Object(o.b)("inlineCode",{parentName:"p"},"bin/hermes"),",\nwhich calls through to the ",Object(o.b)("inlineCode",{parentName:"p"},"eval()")," global function in the ",Object(o.b)("inlineCode",{parentName:"p"},"Runtime"),"."))}b.isMDXComponent=!0}}]);